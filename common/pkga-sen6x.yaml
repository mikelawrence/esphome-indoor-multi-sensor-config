# PACKAGE A
#   Adds SEN66 sensors:
#     Temperature, Humidity, Carbon Dioxide (CO₂),
#     Volatile Organic Compounds (VOC), Nitrous Oxides (NOx) and
#     Particulate Matter (PM)
#   Not compatible with PACKAGE B packages
esphome:
  on_boot:
    priority: 600.0
    then:
      - lambda: |-
          id(co2_available_var) = true;
          id(pm25_available_var) = true;

api:
  on_client_connected:
    then:
      - text_sensor.template.publish:
          id: co2_calibration_date
          state: ${co2_calibration_date}

i2c:
  - id: i2c2_bus
    sda: GPIO43
    scl: GPIO44
    frequency: 400kHz
    scan: true

number:
  - platform: template
    id: co2_forced_cal_value
    name: "CO₂ Calibration Value"
    device_class: carbon_dioxide
    entity_category: config
    optimistic: true
    max_value: 1200
    min_value: 400
    step: 1
    initial_value: 420
    set_action:
      - delay: 1s

button:
  - platform: template
    name: "Start Fan Auto Clean"
    entity_category: config
    on_press:
      - sen5x.start_fan_autoclean: sen66_sensor
  - platform: template
    name: "Activate SHT Heater"
    entity_category: config
    on_press:
      - sen5x.activate_heater: sen66_sensor
  - platform: template
    name: "CO₂ Calibrate"
    entity_category: config
    on_press:
      - sen5x.perform_forced_co2_calibration:
          value: !lambda |-
            float value = id(co2_forced_cal_value).state;
            ESP_LOGD("scd4x", "CO₂ Calibration executed, CO₂=%0.0f", value);
            return value;
          id: sen66_sensor

sensor:
  - platform: sen5x
    id: sen66_sensor
    i2c_id: i2c2_bus
    address: 0x6B
    update_interval: 1s
    # setup_priority: -400
    model: SEN66
    store_baseline: true
    temperature:
      # temperature 1s interval averaged to once a minute
      # first 5 minutes ignored
      id: temperature_internal
      accuracy_decimals: 2
      filters:
        - filter_out: NAN
        - lambda: |-
            // get the first board temperature out quickly
            if(!id(sht4x_available_var) && isnan(id(board_temperature_var)))
              id(board_temperature_var) = x;
            return x;
        - skip_initial: 300
        - throttle_average: 60s
      on_value:
        then:
          - lambda: |-
              if(!id(sht4x_available_var))
                id(board_temperature_var) = x;
    humidity:
      # humidity 1s interval averaged to once a minute
      # first 5 minutes ignored
      id: humidity_internal
      accuracy_decimals: 2
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - offset: ${humidity_offset}
        - throttle_average: 60s
    pm_1_0:
      # PM 1µm 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "PM <1µm Mass concentration"
      id: pm_1_0
      accuracy_decimals: 2
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
    pm_2_5:
      # PM 2.5µm 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "PM <2.5µm Mass concentration"
      id: pm_2_5
      accuracy_decimals: 2
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
      on_value:
        then:
          - lambda: |-
              if (x > 35.0)
                id(pm25_warning_var) = true;
              if (x < 31.5)
                id(pm25_warning_var) = false;
              if (x > 75.0)
                id(pm25_alarm_var) = true;
              if (x < 67.5)
                id(pm25_alarm_var) = false;
    pm_4_0:
      # PM 4µm 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "PM <4µm Mass concentration"
      id: pm_4_0
      accuracy_decimals: 2
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
    pm_10_0:
      # PM 10µm 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "PM <10µm Mass concentration"
      id: pm_10_0
      accuracy_decimals: 2
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
    co2:
      # CO₂ internal 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "CO₂"
      id: co2
      automatic_self_calibration: false
      accuracy_decimals: 0
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
      on_value:
        then:
          - lambda: |-
              if (x > 2000.0)
                id(co2_warning_var) = true;
              if (x < 1800.0)
                id(co2_warning_var) = false;
    nox:
      # NOₓ 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "NOₓ"
      id: nox
      accuracy_decimals: 0
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
    voc:
      # VOC 1s interval averaged to once a minute
      # first 5 minutes ignored
      name: "VOC"
      id: voc
      accuracy_decimals: 0
      filters:
        - skip_initial: 300
        - filter_out: NAN
        - throttle_average: 60s
  - platform: copy
    # temperature_internal median over last 5 minutes, output every minute
    id: temperature
    name: "Temperature"
    accuracy_decimals: 2
    source_id: temperature_internal
    filters:
      - offset: ${temperature_offset}
      - median:
          window_size: 5
          send_every: 1
  - platform: copy
    # humidity_internal median over last 5 minutes, output every minute
    id: humidity
    name: "Humidity"
    source_id: humidity_internal
    accuracy_decimals: 2
    filters:
      - median:
          window_size: 5
          send_every: 1

text_sensor:
  - platform: template
    name: "CO₂ Calibration Date"
    id: co2_calibration_date
    entity_category: diagnostic
    update_interval: never
    lambda: 'return {""};'
